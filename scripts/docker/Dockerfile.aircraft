FROM nvcr.io/nvidia/cuda:12.8.1-cudnn-runtime-ubuntu22.04 AS base_amd64
FROM nvcr.io/nvidia/l4t-jetpack:r36.4.0 AS base_arm64
################################################################################
# Stage 1 - 8GB ################################################################
################################################################################
FROM base_${TARGETARCH} AS ros2-image

# Tell apt (and other Debian tools) not to prompt for user input during package installs
ENV DEBIAN_FRONTEND=noninteractive

# Update the package list and install basic dependencies
RUN apt update \
    && apt install -y --no-install-recommends \
        wget gosu htop vim ruby tmux net-tools iproute2 iputils-ping netcat-openbsd \
        python3-pip python3-venv \
        mesa-utils \
    && gem install tmuxinator \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# Install ROS2 Humble
# Based on https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html
RUN apt update \
    && apt install -y --no-install-recommends \
        locales \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
RUN apt update \
    && apt install -y --no-install-recommends \
        software-properties-common curl \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu \
    $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt update \
    && apt install -y --no-install-recommends \
        ros-humble-desktop ros-dev-tools \
        ros-humble-bondcpp ros-humble-ament-cmake-clang-format \
        ros-humble-vision-msgs \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN echo "source /opt/ros/humble/setup.bash" >> /root/.bashrc
RUN rosdep init

################################################################################
# Stage 2 - 8GB ################################################################
################################################################################
FROM ros2-image AS ros2-px4msgs-image

# Build PX4 messages
COPY /github_clones/px4_msgs /aas/github_ws/src/px4_msgs
WORKDIR /aas/github_ws
RUN rosdep update
RUN rosdep install --from-paths src --ignore-src --rosdistro humble -y
# Explicitly use bash, not sh, to source and build the workspace
RUN bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install"

################################################################################
# Stage 3 - 8.5GB ##############################################################
################################################################################
FROM ros2-px4msgs-image AS ros2-px4msgs-dds-image

# XRCE-DDS
# Based on https://micro-xrce-dds.docs.eprosima.com/en/latest/installation.html#installing-the-agent-standalone
COPY /github_clones/Micro-XRCE-DDS-Agent /aas/github_repos/Micro-XRCE-DDS-Agent
WORKDIR /aas/github_repos/Micro-XRCE-DDS-Agent
RUN mkdir build && cd build && \
    cmake .. && \
    make -j$(nproc) && \
    make install && \
    ldconfig
# Run with $ MicroXRCEAgent udp4 -p 8888

################################################################################
# Stage 4 - 8.5GB ##############################################################
################################################################################
FROM ros2-px4msgs-dds-image AS ros2-px4msgs-dds-mavros-image

# MAVROS
RUN apt-get update && \
    apt-get install -y ros-humble-mavros ros-humble-mavros-extras ros-humble-mavros-msgs \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN /opt/ros/humble/lib/mavros/install_geographiclib_datasets.sh
# Run with $ ros2 launch mavros apm.launch fcu_url:=[URI]

################################################################################
# Stage 5 - 15GB ###############################################################
################################################################################
FROM ros2-px4msgs-dds-mavros-image AS ros2-px4msgs-dds-mavros-yolo-image

# Install YOLOv8 and ONNX in virtual environment /yolo-env/
# See https://github.com/ultralytics/ultralytics/blob/main/README.md and https://onnxruntime.ai/getting-started
RUN python3 -m venv /yolo-env
RUN /yolo-env/bin/pip3 install --no-cache-dir --upgrade pip && \
    /yolo-env/bin/pip3 install --no-cache-dir --resume-retries 5 ultralytics onnx
# Check YOLO with $ /yolo-env/bin/python3 -c "import ultralytics; print(ultralytics.__version__)"

# Save the model weights (ONNX, Opset 12), class names, and download a sample video for testing
WORKDIR /aas/yolo
# Model options (from fastest to most accurate, <10MB to >100MB): yolov8n, yolov8s, yolov8m, yolov8l, yolov8x
RUN /yolo-env/bin/python3 -c "from ultralytics import YOLO; YOLO('yolov8n.pt').export(format='onnx', opset=12)" && \
    /yolo-env/bin/python3 -c "import json; from ultralytics import YOLO; print(json.dumps(YOLO('yolov8n.pt').names))" | grep '{' > coco.json && \
    rm yolov8n.pt
RUN wget https://github.com/intel-iot-devkit/sample-videos/raw/master/person-bicycle-car-detection.mp4 -O /sample.mp4

# Add GStreamer, Python OpenCV packages
RUN apt update \
    && apt install -y --no-install-recommends \
        gstreamer1.0-tools gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav \
        python3-opencv \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# NOTE: we want system Python's OpenCV to have GStreamer support
RUN pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir --resume-retries 5 "numpy<2"
# Check with $ python3 -c "import cv2; print(cv2.getBuildInformation())"
# Versus $ /yolo-env/bin/python3 -c "import cv2; print(cv2.getBuildInformation())"

################################################################################
# Alternate stage for ONNX Runtime GPU: use CUDA in sim, TensorRT on Orin ######
################################################################################
FROM ros2-px4msgs-dds-mavros-yolo-image AS image-with-onnxruntime-gpu_amd64
# Add ONNX Runtime with GPU (CUDA) support for system Python
RUN pip3 install --no-cache-dir --upgrade pip && \
    pip3 install --no-cache-dir --resume-retries 5 onnxruntime-gpu
# Check with $ python3 -c "import onnxruntime as ort; print(ort.__version__); print(ort.get_available_providers())"

FROM ros2-px4msgs-dds-mavros-yolo-image AS image-with-onnxruntime-gpu_arm64
# Build ONNX Runtime from source with Jetson (TensorRT) support for system Python
# Based on https://onnxruntime.ai/docs/build/eps.html#nvidia-jetson-tx1tx2nanoxavierorin
# CMAKE_CUDA_ARCHITECTURES=87 based on: https://developer.nvidia.com/cuda-gpus
# Use CMAKE_CUDA_ARCHITECTURES=native if running within the container
# WARNING: this step takes up to 45'
COPY /github_clones/onnxruntime /aas/github_repos/onnxruntime
RUN apt update && \
    apt install -y --no-install-recommends \
        build-essential software-properties-common libopenblas-dev \
        libpython3.10-dev python3-pip python3-dev python3-setuptools python3-wheel && \
    pip3 install --no-cache-dir --upgrade "cmake>=3.28" && \
    cd /aas/github_repos/onnxruntime/ && \
    CUDACXX="/usr/local/cuda/bin/nvcc" ./build.sh --config Release --update --build --parallel --build_wheel \
        --use_tensorrt --cuda_home /usr/local/cuda --cudnn_home /usr/lib/aarch64-linux-gnu \
        --tensorrt_home /usr/lib/aarch64-linux-gnu \
        --skip_tests --cmake_extra_defines 'CMAKE_CUDA_ARCHITECTURES=87' \
        'onnxruntime_BUILD_UNIT_TESTS=OFF' 'onnxruntime_USE_FLASH_ATTENTION=OFF' \
        'onnxruntime_USE_MEMORY_EFFICIENT_ATTENTION=OFF' \
        'CMAKE_POLICY_VERSION_MINIMUM=3.5' \
        --allow_running_as_root && \
    cd /aas/github_repos/onnxruntime/build/Linux/Release/dist && \
    pip3 install onnxruntime_gpu-1.22.1-cp310-cp310-linux_aarch64.whl && \
    cd /aas/github_repos/onnxruntime/build/Linux/Release && \
    sudo make install && \
    sudo ldconfig && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*
ENV PYTHONPATH=/aas/github_repos/onnxruntime/build/Linux/Release
# Check with $ python3 -c "import onnxruntime as ort; print(ort.__version__); print(ort.get_available_providers())"

################################################################################
# Stage 6 - 15+GB ##############################################################
################################################################################
FROM image-with-onnxruntime-gpu_${TARGETARCH} AS ros2-px4msgs-dds-mavros-yolo-kissicp-zenoh-image

# Install KISS-ICP
RUN pip3 install --no-cache-dir --upgrade "cmake>=3.24"
COPY /github_clones/kiss-icp /aas/github_ws/src/kiss-icp
WORKDIR /aas/github_ws
# Explicitly use bash, not sh, to source and build the workspace
RUN bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install"

# Add pymavlink for debugging and testing
RUN pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir --resume-retries 5 pymavlink
# Check with $ python3 -c "import pymavlink; print(pymavlink.__version__)"

# Install Zenoh
RUN echo "deb [trusted=yes] https://download.eclipse.org/zenoh/debian-repo/ /" | sudo tee -a /etc/apt/sources.list > /dev/null
RUN apt-get update && \
    apt-get install -y zenoh-bridge-ros2dds \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

################################################################################
# Stage 7 - 15+GB ##############################################################
################################################################################
FROM ros2-px4msgs-dds-mavros-yolo-kissicp-zenoh-image AS aircraft-dev-image

# Install PlotJuggler
RUN apt-get update && \
    apt-get install -y ros-humble-plotjuggler \
    ros-humble-plotjuggler-ros \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# Build the ROS 2 workspace (NOTE: also includes ground_system_msgs from the simulation_ws)
COPY simulation/simulation_ws/src/ground_system_msgs /aas/aircraft_ws/src/ground_system_msgs
COPY aircraft/aircraft_ws/src /aas/aircraft_ws/src
WORKDIR /aas/aircraft_ws
RUN rosdep update
RUN rosdep install --from-paths src/ --ignore-src --rosdistro humble -y --skip-keys "px4_msgs"
# Explicitly use bash, not sh, to source and build the workspace
RUN bash -c "source /opt/ros/humble/setup.bash && source /aas/github_ws/install/setup.bash && colcon build --symlink-install"

# Copy resources and configuration files from this repository
COPY aircraft/aircraft_resources/ /aas/aircraft_resources
COPY aircraft/aircraft_resources/patches/kiss_icp.rviz /aas/github_ws/src/kiss-icp/ros/rviz/kiss_icp.rviz
COPY aircraft/aircraft_resources/patches/apm_pluginlists.yaml /opt/ros/humble/share/mavros/launch/apm_pluginlists.yaml

# Source the workspaces
RUN echo "source /aas/github_ws/install/setup.bash" >> /root/.bashrc
RUN echo "source /aas/aircraft_ws/install/setup.bash" >> /root/.bashrc
# If needed (but already in .bashrc) $ source /opt/ros/humble/setup.bash && source /aas/github_ws/install/setup.bash && source /aas/aircraft_ws/install/setup.bash

# Final config
WORKDIR /aas
COPY aircraft/aircraft.yml.erb /aas/aircraft.yml.erb
ENTRYPOINT ["tmuxinator", "start", "-p", "/aas/aircraft.yml.erb"]

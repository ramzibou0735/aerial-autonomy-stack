################################################################################
# Stage 1 - 8GB ################################################################
################################################################################
FROM nvcr.io/nvidia/cuda:12.8.1-cudnn-runtime-ubuntu22.04 AS ros2-image

# Tell apt (and other Debian tools) not to prompt for user input during package installs
ENV DEBIAN_FRONTEND=noninteractive

# Update the package list and install basic dependencies
RUN apt update \
    && apt install -y --no-install-recommends \
        wget gosu htop vim ruby tmux net-tools iproute2 iputils-ping netcat-openbsd \
        python3-pip python3-venv \
        mesa-utils \
    && gem install tmuxinator \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# Install ROS2 Humble
# Based on https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html
RUN apt update \
    && apt install -y --no-install-recommends \
        locales \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
RUN apt update \
    && apt install -y --no-install-recommends \
        software-properties-common curl \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu \
    $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt update \
    && apt install -y --no-install-recommends \
        ros-humble-desktop ros-dev-tools \
        ros-humble-bondcpp ros-humble-ament-cmake-clang-format \
        ros-humble-vision-msgs \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN echo "source /opt/ros/humble/setup.bash" >> /root/.bashrc
RUN rosdep init

################################################################################
# Stage 2 - 9GB ################################################################
################################################################################
FROM ros2-image AS ros2-gz-qgc-image

# Gazebo Harmonic
# Based on https://gazebosim.org/docs/harmonic/install_ubuntu/
RUN apt update \
    && apt install -y --no-install-recommends \
        lsb-release gnupg \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN curl https://packages.osrfoundation.org/gazebo.gpg --output /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null
RUN apt update \
    && apt install -y --no-install-recommends \
        gz-harmonic ros-humble-ros-gzharmonic \
        libgz-transport13-* python3-gz-transport13 python3-gz-msgs10 \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
# Run with $ gz sim

# QGroundControl (as qgcuser)
# Based on https://docs.qgroundcontrol.com/master/en/qgc-user-guide/getting_started/download_and_install.html
WORKDIR /
RUN useradd -m -s /bin/bash qgcuser
RUN usermod -aG dialout qgcuser
# RUN apt-get remove modemmanager -y
RUN apt update \
    && apt install -y --no-install-recommends \
        gstreamer1.0-plugins-bad gstreamer1.0-libav gstreamer1.0-gl \
        libfuse2 \
        libxcb-xinerama0 libxkbcommon-x11-0 libxcb-cursor-dev \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN wget https://d176tv9ibo4jno.cloudfront.net/latest/QGroundControl-x86_64.AppImage && \
    chmod +x /QGroundControl-x86_64.AppImage && \
    /QGroundControl-x86_64.AppImage --appimage-extract && \
    rm /QGroundControl-x86_64.AppImage
# Run with $ gosu qgcuser /squashfs-root/AppRun

################################################################################
# Stage 3 - 13GB ###############################################################
################################################################################
FROM ros2-gz-qgc-image AS ros2-gz-qgc-px4-image

# PX4 SITL (NOTE: install PX4 tools first to avoid conflicts with ArduPilot, build later to customize)
# Based on https://docs.px4.io/main/en/dev_setup/dev_env_linux_ubuntu.html
COPY /github_clones/PX4-Autopilot /aas/github_apps/PX4-Autopilot
WORKDIR /aas/github_apps/PX4-Autopilot
RUN bash ./Tools/setup/ubuntu.sh --no-sim-tools

################################################################################
# Stage 4 - 18GB ###############################################################
################################################################################
FROM ros2-gz-qgc-px4-image AS ros2-gz-qgc-px4-ardupilot-image

# ArduPilot SITL (temporarily as arduuser, then re chown to root)
# Based on https://ardupilot.org/dev/docs/building-setup-linux.html#building-setup-linux
COPY /github_clones/ardupilot /aas/github_apps/ardupilot
WORKDIR /aas/github_apps/ardupilot
RUN useradd -m -s /bin/bash arduuser && \
    echo "arduuser ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/arduuser && chmod 0440 /etc/sudoers.d/arduuser && \
    gosu arduuser git config --global --add safe.directory /aas/github_apps/ardupilot && \
    chown -R arduuser:arduuser /aas/github_apps/ardupilot
RUN USER=arduuser gosu arduuser bash ./Tools/environment_install/install-prereqs-ubuntu.sh -y
RUN gosu arduuser bash -c "cd /aas/github_apps/ardupilot && ./waf configure --board sitl && ./waf build"
RUN chown -R root:root /aas/github_apps/ardupilot
# Run with $ /aas/github_apps/ardupilot/build/sitl/bin/arducopter

# ArduPilot Gazebo Plugin
# Based on https://ardupilot.org/dev/docs/sitl-with-gazebo.html
COPY /github_clones/ardupilot_gazebo /aas/github_apps/ardupilot_gazebo
WORKDIR /aas/github_apps/ardupilot_gazebo
RUN apt update \
    && apt install -y --no-install-recommends \
        rapidjson-dev \
        libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
RUN pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir --resume-retries 5 "numpy<2" mavproxy
ENV GZ_VERSION=harmonic
RUN mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo && \
    make -j$(nproc)

################################################################################
# Temporary stage to filter airframes ##########################################
################################################################################
FROM ubuntu:22.04 AS airframe_filter_stage
COPY simulation/simulation_resources/aircraft_models/ /temp_folder
RUN mkdir /airframes
RUN find /temp_folder -type f -regex '.*/[0-9]+_.*' -exec cp {} /airframes/ \;

################################################################################
# Stage 5 - 18+GB ##############################################################
################################################################################
FROM ros2-gz-qgc-px4-ardupilot-image AS ros2-gz-qgc-px4custom-ardupilot-image

# Apply PX4 patch (DDS Agent on custom IP, ...) created with $ git diff > ../px4-v1.16.0.patch
COPY simulation/simulation_resources/patches/px4-v1.16.0.patch /aas/github_apps/px4-v1.16.0.patch
WORKDIR /aas/github_apps/PX4-Autopilot
RUN git apply ../px4-v1.16.0.patch

# Replace dds_topics.yaml with custom topics
COPY simulation/simulation_resources/patches/dds_topics.yaml /aas/github_apps/PX4-Autopilot/src/modules/uxrce_dds_client/dds_topics.yaml

# Add PX4 Airframes ROMFS
COPY --from=airframe_filter_stage /airframes/ /aas/github_apps/PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/airframes/
WORKDIR /aas/github_apps/PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/airframes
RUN rm -f CMakeLists.txt && \
    echo "px4_add_romfs_files(" >> CMakeLists.txt && \
    find ./ -type f -printf '%f\n' | sed 's/^/  /' >> CMakeLists.txt && \
    echo ")" >> CMakeLists.txt

# Build PX4 SITL
WORKDIR /aas/github_apps/PX4-Autopilot
RUN make px4_sitl
# Run with $ /aas/github_apps/PX4-Autopilot/build/px4_sitl_default/bin/px4

################################################################################
# Stage 6 - 18+GB ##############################################################
################################################################################
FROM ros2-gz-qgc-px4custom-ardupilot-image AS ros2-gz-qgc-px4custom-ardupilot-gst-pymavlink-zenoh-image

# Add GStreamer packages to stream the cameras to the aircraft containers
RUN apt update \
    && apt install -y --no-install-recommends \
        gstreamer1.0-tools gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-libav \
        python3-gi gir1.2-gst-plugins-base-1.0 gir1.2-gstreamer-1.0 \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# Add pymavlink to emulate the ground system using telemetry data
RUN pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir --resume-retries 5 pymavlink
# Check with $ python3 -c "import pymavlink; print(pymavlink.__version__)"

# Install Zenoh
RUN echo "deb [trusted=yes] https://download.eclipse.org/zenoh/debian-repo/ /" | sudo tee -a /etc/apt/sources.list > /dev/null
RUN apt-get update && \
    apt-get install -y zenoh-bridge-ros2dds \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

################################################################################
# Stage 7 - 18+GB ##############################################################
################################################################################
FROM ros2-gz-qgc-px4custom-ardupilot-gst-pymavlink-zenoh-image AS simulation-dev-image

# Install wmctrl and xrandr to resize Gazebo and QGC GUIs
RUN apt update \
    && apt install -y --no-install-recommends \
        wmctrl x11-xserver-utils \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# Install https://github.com/PX4/flight_review
RUN apt-get update && \
    apt-get install -y sqlite3 libfftw3-bin libfftw3-dev \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*
COPY /github_clones/flight_review /aas/github_apps/flight_review
WORKDIR /aas/github_apps/flight_review/app
RUN python3 -m venv /px4rf-env
RUN /px4rf-env/bin/pip3 install --no-cache-dir --upgrade pip && \
    /px4rf-env/bin/pip3 install --no-cache-dir --resume-retries 5 -r requirements.txt

# # Build the ROS 2 workspace for external packages
# RUN mkdir -p /aas/github_ws/src
# WORKDIR /aas/github_ws
# RUN rosdep update
# RUN rosdep install --from-paths src/ --ignore-src --rosdistro humble -y
# # Explicitly use bash, not sh, to source and build the workspace
# RUN bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install"

# Build the ROS 2 workspace
COPY simulation/simulation_ws/src /aas/simulation_ws/src
WORKDIR /aas/simulation_ws
RUN rosdep update
RUN rosdep install --from-paths src/ --ignore-src --rosdistro humble -y
# Explicitly use bash, not sh, to source and build the workspace
RUN bash -c "source /opt/ros/humble/setup.bash && (source /aas/github_ws/install/setup.bash || true) && colcon build --symlink-install"

# Copy resources and configuration files from this repository
COPY simulation/simulation_resources/ /aas/simulation_resources
COPY simulation/simulation_resources/patches/QGroundControl.ini /home/qgcuser/.config/QGroundControl/QGroundControl.ini
RUN chmod +x /aas/simulation_resources/aircraft_models/_create_ardupilot_models.sh
RUN chmod +x /aas/simulation_resources/simulation_worlds/_create_ardupilot_world.sh

# Source the workspaces
# RUN echo "source /aas/github_ws/install/setup.bash" >> /root/.bashrc
RUN echo "source /aas/simulation_ws/install/setup.bash" >> /root/.bashrc
# If needed (but already in .bashrc) $ source /opt/ros/humble/setup.bash && source /aas/github_ws/install/setup.bash && source /aas/simulation_ws/install/setup.bash

# Final config
WORKDIR /aas
COPY simulation/simulation.yml.erb /aas/simulation.yml.erb
ENTRYPOINT ["tmuxinator", "start", "-p", "/aas/simulation.yml.erb"]
